# -*- coding: utf-8 -*-
"""Ex4-TransferLearning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MS23NsmLpQD6jq-XBmYSzjju4_MJZGKc
"""

import tensorflow as tf
import tensorflow_hub as hub
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import pathlib

from tensorflow.keras.layers import Conv2D,MaxPool2D,Dense,Flatten
from tensorflow.keras.models import Sequential

from google.colab import files
uploaded = files.upload()

import zipfile

# Unzip the downloaded file
zip_ref = zipfile.ZipFile("Vehicle.zip", "r")
zip_ref.extractall()
zip_ref.close()

def image_preprocess(image_file,size=224):
  img = tf.io.read_file(image_file)
  img = tf.image.decode_image(img, channels=3)
  img = tf.image.resize(img, size=[size,size])
  img = img/255.
  return img

def pred_and_plot(model, image_file, class_names):
  img = image_preprocess(image_file)
  pred = model.predict(tf.expand_dims(img,axis=0))
  pred_class = class_names[tf.argmax(pred,1)]
  plt.figure()
  plt.title(pred_class)
  plt.imshow(img)

plt.imshow(image_preprocess('/content/vehicles/train/bike/2Q__ (7).jpg'))

# create tenserboard
import datetime
def create_tensorboard_callback(dir_name, experiment_name):
  """
  To create a tensorboard_callback for visualization and model comparison
  """
  log_dir = dir_name + "/" + experiment_name + "/" + datetime.datetime.now().strftime("%Y%m%d-%H%M%S")
  tensorboard_callback = tf.keras.callbacks.TensorBoard(
      log_dir=log_dir
  )
  print(f"Saving TensorBoard log files to: {log_dir}")
  return tensorboard_callback

from tensorflow.keras.preprocessing.image import ImageDataGenerator
train_dir = '/content/vehicles/train/'
test_dir = '/content/vehicles/test/'
train_datagen = ImageDataGenerator(rescale=1/255.)
test_datagen = ImageDataGenerator(rescale=1/255.)
train_data = train_datagen.flow_from_directory(train_dir,batch_size=32,target_size=(224,224),class_mode='categorical',shuffle=True)
test_data = test_datagen.flow_from_directory(test_dir,batch_size=32,target_size=(224,224),class_mode='categorical')

# set the random seed
tf.random.set_seed(42)

# create the model
base_model = Sequential([
                    Conv2D(10, 3, activation='relu', input_shape=(224,224,3)),
                    Conv2D(10, 3, activation='relu'),
                    MaxPool2D(),
                    Conv2D(10,3,activation='relu'),
                    Conv2D(10,3,activation='relu'),
                    MaxPool2D(),
                    Flatten(),
                    Dense(9, activation='softmax')
])

base_model.compile(loss=tf.keras.losses.categorical_crossentropy, optimizer=tf.keras.optimizers.Adam(), metrics=['accuracy'])

history_basemodel = base_model.fit(train_data,epochs=5,steps_per_epoch=len(train_data),validation_data=test_data,validation_steps=len(test_data)
,callbacks=[create_tensorboard_callback(dir_name='Vehicle_Classification',experiment_name='base_model')]
)

# Upload TensorBoard dev records
!tensorboard dev upload --logdir ./Vehicle_Classification/ \
  --name "Vehicle_multiclass_basemodel_v2" \
  --description "Base_model v2 built from scratch for vehicle classification" \
  --one_shot

# set the random seed
tf.random.set_seed(42)

# create the model
base_model_v2 = Sequential([
    Conv2D(64,2,input_shape=(224,224,3),activation="relu"),
    Conv2D(64,2,activation="relu"),
    MaxPool2D(),
    Conv2D(64,2,activation="relu"),
    Conv2D(64,2,activation="relu"),
    MaxPool2D(),
    Conv2D(32,2,activation="relu"),
    Conv2D(32,2,activation="relu"),
    MaxPool2D(),
    Flatten(),
    Dense(9,activation="softmax")
    ]
)

base_model_v2.compile(loss=tf.keras.losses.categorical_crossentropy,optimizer=tf.keras.optimizers.Adam(),
                      metrics=["accuracy"])
history_base_model_v2 = base_model_v2.fit(train_data,epochs=5,steps_per_epoch=len(train_data),validation_data=test_data,
                  validation_steps=len(test_data),callbacks=[create_tensorboard_callback('Vehicle_Classification','base_model_v2')])

# Get the class names
import pathlib
def get_classname(train_dir):
  datadir = pathlib.Path(train_dir)
  class_name = np.array(sorted([item.name for item in datadir.glob('*')]))
  return class_name

class_name = get_classname(train_dir='/content/vehicles/train')
pred_and_plot(base_model,'/content/vehicles/train/car/2Q__ (1).jpg',class_name)

"""Starting with **Transfer learning**
1) Download the efficient net model
2) Compile
3) Fit with the vehicle data
4) Evaluate the model
5) Fine tune the model
"""

import tensorflow_hub as hub
effv_net_url = 'https://tfhub.dev/tensorflow/efficientnet/b0/feature-vector/1'

def create_model(model_url, num_classes=9):
  """
  Create a tensorflow model from transfer learning
  """
  feature_extraction_layer = hub.KerasLayer(model_url, trainable=False, 
                                            name='feature_extraction_layer', input_shape=(224,224,3))
  model = tf.keras.Sequential([
                               feature_extraction_layer,
                               Dense(num_classes, activation="softmax", name='output_layer' )
  ])
  return model

effvnet_model = create_model(effv_net_url, 9)

# Compile and fit the model

effvnet_model.compile(loss=tf.keras.losses.categorical_crossentropy, optimizer=tf.keras.optimizers.Adam()
,metrics=["accuracy"])
effvnet_model.fit(train_data, epochs=5, steps_per_epoch=len(train_data), validation_data=test_data
                  ,validation_steps=len(test_data), 
                  callbacks = [create_tensorboard_callback(dir_name='Vehicle_Classification', experiment_name='Effvnet_model')])

pred_and_plot(effvnet_model,'val_1_aero.jpg',class_name)

pred_and_plot(effvnet_model,'val_2_scooty.jpg',class_name)

pred_and_plot(effvnet_model,'val_3_heli.jpg',class_name)



